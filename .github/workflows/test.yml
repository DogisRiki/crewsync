name: Spring CI with Gradle

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-22.04

    env:
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      TZ: ${{ secrets.TZ }}
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # - name: Cache Gradle packages
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       /workspace/***/.gradle/caches
      #       /workspace/***/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      - name: Setup Docker Compose
        run: |
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" > ./db/db-access.env
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> ./db/db-access.env
          echo "MYSQL_USER=${MYSQL_USER}" >> ./db/db-access.env
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> ./db/db-access.env
          echo "TZ=${TZ}" >> ./db/db-access.env
          echo "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}" > ./api/db-access.env
          echo "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}" >> ./api/db-access.env
          echo "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}" >> ./api/db-access.env
          docker-compose -f docker-compose.test.yml up -d db
          docker-compose -f docker-compose.test.yml build api
          
      - name: Set executable permission for gradlew
        run: chmod +x ./api/crewsync/gradlew

      - name: Run tests
        run: |
          docker-compose -f docker-compose.test.yml run api bash -c "cd ./crewsync && ./gradlew test"

      - name: Check directories
        run: |
          docker-compose -f docker-compose.test.yml run api bash -c "ls -la"

      # - name: Check Gradle properties
      #   run: |
      #     docker-compose -f docker-compose.test.yml run api bash -c "./gradlew properties | grep 'Gradle user home'"

      - name: Archive unit test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-report
          path: api/crewsync/build/reports/tests/test
